
#ifndef BIO_CACHE_H_
#define BIO_CACHE_H_

#include "bio/defs.h"

BIO_NS_START



template< typename T >
struct Dereference
	: std::unary_function< boost::shared_ptr< T >, T >
{
	typedef std::unary_function< boost::shared_ptr< T >, T > base_t;
	using base_t::result_type;
	using base_t::argument_type;

	typename base_t::result_type & operator()( const typename base_t::argument_type & ptr) const
	{
		return *( ptr.get() );
	}
};


/**
Caches elements of type Element, indexed by keys of type Key. Uses an ElementCreator to create elements missing from the
cache.
*/
template<
	typename ElementCreator,											// creates elements not already in the cache
	typename Key = typename ElementCreator::argument_type,				// indexes elements in the cache
	typename Element = typename ElementCreator::result_type				// the element type
>
struct Cache
	: std::unary_function< Key, Element >
{
public:
	typedef ElementCreator element_creator_t;
	typedef Key key_t;
	typedef Element element_t;
	typedef Cache< element_creator_t, key_t, element_t > cache_t;

protected:
	typedef std::map< key_t, element_t > map_t;

	map_t elements;
	element_creator_t element_creator;

public:
	Cache(
		const element_creator_t & element_creator = element_creator_t()
	)
	: element_creator( element_creator )
	{
	}

	element_t & operator()( const key_t & key )
	{
		// look for the element with given key
		typename map_t::iterator e = elements.find( key );

		// did we find it
		if ( elements.end() == e )
		{
			// no - so insert a new one generated by our element creator
			e = elements.insert( typename map_t::value_type( key, element_creator( key ) ) ).first;
		}

		return e->second;
	}

	/** Insert an element into the cache, if not already there. Returns true if element inserted. */
	bool insert( const key_t & key, const element_t & element )
	{
		std::pair< typename map_t::iterator, bool > insert_result = elements.insert( typename map_t::value_type( key, element ) );
		return insert_result.second;
	}

	/** Use with caution. */
	void clear()
	{
		elements.clear();
	}
};





BIO_NS_END

#endif //BIO_CACHE_H_
