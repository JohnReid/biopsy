/* soapClient.cpp
   Generated by gSOAP 2.7.7 from Generated/kegg_wsdl.h
   Copyright (C) 2000-2005, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/
#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapClient.cpp ver 2.7.7 2006-04-27 13:54:16 GMT")


SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__list_USCOREdatabases(struct soap *soap, const char *soap_endpoint, const char *soap_action, struct ns1__list_USCOREdatabasesResponse &_param_1)
{	struct ns1__list_USCOREdatabases soap_tmp_ns1__list_USCOREdatabases;
	if (!soap_endpoint)
		soap_endpoint = "http://soap.genome.jp/keggapi/request_v5.0.cgi";
	if (!soap_action)
		soap_action = "SOAP/KEGG#list_databases";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__list_USCOREdatabases(soap, &soap_tmp_ns1__list_USCOREdatabases);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__list_USCOREdatabases(soap, &soap_tmp_ns1__list_USCOREdatabases, "ns1:list_databases", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__list_USCOREdatabases(soap, &soap_tmp_ns1__list_USCOREdatabases, "ns1:list_databases", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_ns1__list_USCOREdatabasesResponse(soap, &_param_1);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns1__list_USCOREdatabasesResponse(soap, &_param_1, "ns1:list_databasesResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__list_USCOREorganisms(struct soap *soap, const char *soap_endpoint, const char *soap_action, struct ns1__list_USCOREorganismsResponse &_param_2)
{	struct ns1__list_USCOREorganisms soap_tmp_ns1__list_USCOREorganisms;
	if (!soap_endpoint)
		soap_endpoint = "http://soap.genome.jp/keggapi/request_v5.0.cgi";
	if (!soap_action)
		soap_action = "SOAP/KEGG#list_organisms";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__list_USCOREorganisms(soap, &soap_tmp_ns1__list_USCOREorganisms);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__list_USCOREorganisms(soap, &soap_tmp_ns1__list_USCOREorganisms, "ns1:list_organisms", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__list_USCOREorganisms(soap, &soap_tmp_ns1__list_USCOREorganisms, "ns1:list_organisms", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_ns1__list_USCOREorganismsResponse(soap, &_param_2);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns1__list_USCOREorganismsResponse(soap, &_param_2, "ns1:list_organismsResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__list_USCOREpathways(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string org, struct ns1__list_USCOREpathwaysResponse &_param_3)
{	struct ns1__list_USCOREpathways soap_tmp_ns1__list_USCOREpathways;
	if (!soap_endpoint)
		soap_endpoint = "http://soap.genome.jp/keggapi/request_v5.0.cgi";
	if (!soap_action)
		soap_action = "SOAP/KEGG#list_pathways";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__list_USCOREpathways.org = org;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__list_USCOREpathways(soap, &soap_tmp_ns1__list_USCOREpathways);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__list_USCOREpathways(soap, &soap_tmp_ns1__list_USCOREpathways, "ns1:list_pathways", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__list_USCOREpathways(soap, &soap_tmp_ns1__list_USCOREpathways, "ns1:list_pathways", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_ns1__list_USCOREpathwaysResponse(soap, &_param_3);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns1__list_USCOREpathwaysResponse(soap, &_param_3, "ns1:list_pathwaysResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__list_USCOREko_USCOREclasses(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string class_USCOREid, struct ns1__list_USCOREko_USCOREclassesResponse &_param_4)
{	struct ns1__list_USCOREko_USCOREclasses soap_tmp_ns1__list_USCOREko_USCOREclasses;
	if (!soap_endpoint)
		soap_endpoint = "http://soap.genome.jp/keggapi/request_v5.0.cgi";
	if (!soap_action)
		soap_action = "SOAP/KEGG#list_ko_classes";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__list_USCOREko_USCOREclasses.class_USCOREid = class_USCOREid;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__list_USCOREko_USCOREclasses(soap, &soap_tmp_ns1__list_USCOREko_USCOREclasses);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__list_USCOREko_USCOREclasses(soap, &soap_tmp_ns1__list_USCOREko_USCOREclasses, "ns1:list_ko_classes", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__list_USCOREko_USCOREclasses(soap, &soap_tmp_ns1__list_USCOREko_USCOREclasses, "ns1:list_ko_classes", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_ns1__list_USCOREko_USCOREclassesResponse(soap, &_param_4);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns1__list_USCOREko_USCOREclassesResponse(soap, &_param_4, "ns1:list_ko_classesResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__binfo(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string db, std::string &return_)
{	struct ns1__binfo soap_tmp_ns1__binfo;
	struct ns1__binfoResponse *soap_tmp_ns1__binfoResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://soap.genome.jp/keggapi/request_v5.0.cgi";
	if (!soap_action)
		soap_action = "SOAP/KEGG#binfo";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__binfo.db = db;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__binfo(soap, &soap_tmp_ns1__binfo);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__binfo(soap, &soap_tmp_ns1__binfo, "ns1:binfo", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__binfo(soap, &soap_tmp_ns1__binfo, "ns1:binfo", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_std__string(soap, &return_);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ns1__binfoResponse = soap_get_ns1__binfoResponse(soap, NULL, "ns1:binfoResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return_ = soap_tmp_ns1__binfoResponse->return_;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__bget(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string string, std::string &return_)
{	struct ns1__bget soap_tmp_ns1__bget;
	struct ns1__bgetResponse *soap_tmp_ns1__bgetResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://soap.genome.jp/keggapi/request_v5.0.cgi";
	if (!soap_action)
		soap_action = "SOAP/KEGG#bget";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__bget.string = string;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__bget(soap, &soap_tmp_ns1__bget);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__bget(soap, &soap_tmp_ns1__bget, "ns1:bget", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__bget(soap, &soap_tmp_ns1__bget, "ns1:bget", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_std__string(soap, &return_);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ns1__bgetResponse = soap_get_ns1__bgetResponse(soap, NULL, "ns1:bgetResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return_ = soap_tmp_ns1__bgetResponse->return_;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__bfind(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string string, std::string &return_)
{	struct ns1__bfind soap_tmp_ns1__bfind;
	struct ns1__bfindResponse *soap_tmp_ns1__bfindResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://soap.genome.jp/keggapi/request_v5.0.cgi";
	if (!soap_action)
		soap_action = "SOAP/KEGG#bfind";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__bfind.string = string;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__bfind(soap, &soap_tmp_ns1__bfind);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__bfind(soap, &soap_tmp_ns1__bfind, "ns1:bfind", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__bfind(soap, &soap_tmp_ns1__bfind, "ns1:bfind", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_std__string(soap, &return_);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ns1__bfindResponse = soap_get_ns1__bfindResponse(soap, NULL, "ns1:bfindResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return_ = soap_tmp_ns1__bfindResponse->return_;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__btit(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string string, std::string &return_)
{	struct ns1__btit soap_tmp_ns1__btit;
	struct ns1__btitResponse *soap_tmp_ns1__btitResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://soap.genome.jp/keggapi/request_v5.0.cgi";
	if (!soap_action)
		soap_action = "SOAP/KEGG#btit";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__btit.string = string;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__btit(soap, &soap_tmp_ns1__btit);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__btit(soap, &soap_tmp_ns1__btit, "ns1:btit", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__btit(soap, &soap_tmp_ns1__btit, "ns1:btit", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_std__string(soap, &return_);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ns1__btitResponse = soap_get_ns1__btitResponse(soap, NULL, "ns1:btitResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return_ = soap_tmp_ns1__btitResponse->return_;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__bconv(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string string, std::string &return_)
{	struct ns1__bconv soap_tmp_ns1__bconv;
	struct ns1__bconvResponse *soap_tmp_ns1__bconvResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://soap.genome.jp/keggapi/request_v5.0.cgi";
	if (!soap_action)
		soap_action = "SOAP/KEGG#bconv";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__bconv.string = string;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__bconv(soap, &soap_tmp_ns1__bconv);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__bconv(soap, &soap_tmp_ns1__bconv, "ns1:bconv", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__bconv(soap, &soap_tmp_ns1__bconv, "ns1:bconv", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_std__string(soap, &return_);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ns1__bconvResponse = soap_get_ns1__bconvResponse(soap, NULL, "ns1:bconvResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return_ = soap_tmp_ns1__bconvResponse->return_;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__get_USCORElinkdb_USCOREby_USCOREentry(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string entry_USCOREid, std::string db, int start, int max_USCOREresults, struct ns1__get_USCORElinkdb_USCOREby_USCOREentryResponse &_param_5)
{	struct ns1__get_USCORElinkdb_USCOREby_USCOREentry soap_tmp_ns1__get_USCORElinkdb_USCOREby_USCOREentry;
	if (!soap_endpoint)
		soap_endpoint = "http://soap.genome.jp/keggapi/request_v5.0.cgi";
	if (!soap_action)
		soap_action = "SOAP/KEGG#get_linkdb_by_entry";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__get_USCORElinkdb_USCOREby_USCOREentry.entry_USCOREid = entry_USCOREid;
	soap_tmp_ns1__get_USCORElinkdb_USCOREby_USCOREentry.db = db;
	soap_tmp_ns1__get_USCORElinkdb_USCOREby_USCOREentry.start = start;
	soap_tmp_ns1__get_USCORElinkdb_USCOREby_USCOREentry.max_USCOREresults = max_USCOREresults;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__get_USCORElinkdb_USCOREby_USCOREentry(soap, &soap_tmp_ns1__get_USCORElinkdb_USCOREby_USCOREentry);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__get_USCORElinkdb_USCOREby_USCOREentry(soap, &soap_tmp_ns1__get_USCORElinkdb_USCOREby_USCOREentry, "ns1:get_linkdb_by_entry", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__get_USCORElinkdb_USCOREby_USCOREentry(soap, &soap_tmp_ns1__get_USCORElinkdb_USCOREby_USCOREentry, "ns1:get_linkdb_by_entry", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_ns1__get_USCORElinkdb_USCOREby_USCOREentryResponse(soap, &_param_5);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns1__get_USCORElinkdb_USCOREby_USCOREentryResponse(soap, &_param_5, "ns1:get_linkdb_by_entryResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__get_USCOREbest_USCOREneighbors_USCOREby_USCOREgene(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string genes_USCOREid, int start, int max_USCOREresults, struct ns1__get_USCOREbest_USCOREneighbors_USCOREby_USCOREgeneResponse &_param_6)
{	struct ns1__get_USCOREbest_USCOREneighbors_USCOREby_USCOREgene soap_tmp_ns1__get_USCOREbest_USCOREneighbors_USCOREby_USCOREgene;
	if (!soap_endpoint)
		soap_endpoint = "http://soap.genome.jp/keggapi/request_v5.0.cgi";
	if (!soap_action)
		soap_action = "SOAP/KEGG#get_best_neighbors_by_gene";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__get_USCOREbest_USCOREneighbors_USCOREby_USCOREgene.genes_USCOREid = genes_USCOREid;
	soap_tmp_ns1__get_USCOREbest_USCOREneighbors_USCOREby_USCOREgene.start = start;
	soap_tmp_ns1__get_USCOREbest_USCOREneighbors_USCOREby_USCOREgene.max_USCOREresults = max_USCOREresults;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__get_USCOREbest_USCOREneighbors_USCOREby_USCOREgene(soap, &soap_tmp_ns1__get_USCOREbest_USCOREneighbors_USCOREby_USCOREgene);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__get_USCOREbest_USCOREneighbors_USCOREby_USCOREgene(soap, &soap_tmp_ns1__get_USCOREbest_USCOREneighbors_USCOREby_USCOREgene, "ns1:get_best_neighbors_by_gene", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__get_USCOREbest_USCOREneighbors_USCOREby_USCOREgene(soap, &soap_tmp_ns1__get_USCOREbest_USCOREneighbors_USCOREby_USCOREgene, "ns1:get_best_neighbors_by_gene", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_ns1__get_USCOREbest_USCOREneighbors_USCOREby_USCOREgeneResponse(soap, &_param_6);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns1__get_USCOREbest_USCOREneighbors_USCOREby_USCOREgeneResponse(soap, &_param_6, "ns1:get_best_neighbors_by_geneResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__get_USCOREbest_USCOREbest_USCOREneighbors_USCOREby_USCOREgene(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string genes_USCOREid, int start, int max_USCOREresults, struct ns1__get_USCOREbest_USCOREbest_USCOREneighbors_USCOREby_USCOREgeneResponse &_param_7)
{	struct ns1__get_USCOREbest_USCOREbest_USCOREneighbors_USCOREby_USCOREgene soap_tmp_ns1__get_USCOREbest_USCOREbest_USCOREneighbors_USCOREby_USCOREgene;
	if (!soap_endpoint)
		soap_endpoint = "http://soap.genome.jp/keggapi/request_v5.0.cgi";
	if (!soap_action)
		soap_action = "SOAP/KEGG#get_best_best_neighbors_by_gene";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__get_USCOREbest_USCOREbest_USCOREneighbors_USCOREby_USCOREgene.genes_USCOREid = genes_USCOREid;
	soap_tmp_ns1__get_USCOREbest_USCOREbest_USCOREneighbors_USCOREby_USCOREgene.start = start;
	soap_tmp_ns1__get_USCOREbest_USCOREbest_USCOREneighbors_USCOREby_USCOREgene.max_USCOREresults = max_USCOREresults;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__get_USCOREbest_USCOREbest_USCOREneighbors_USCOREby_USCOREgene(soap, &soap_tmp_ns1__get_USCOREbest_USCOREbest_USCOREneighbors_USCOREby_USCOREgene);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__get_USCOREbest_USCOREbest_USCOREneighbors_USCOREby_USCOREgene(soap, &soap_tmp_ns1__get_USCOREbest_USCOREbest_USCOREneighbors_USCOREby_USCOREgene, "ns1:get_best_best_neighbors_by_gene", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__get_USCOREbest_USCOREbest_USCOREneighbors_USCOREby_USCOREgene(soap, &soap_tmp_ns1__get_USCOREbest_USCOREbest_USCOREneighbors_USCOREby_USCOREgene, "ns1:get_best_best_neighbors_by_gene", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_ns1__get_USCOREbest_USCOREbest_USCOREneighbors_USCOREby_USCOREgeneResponse(soap, &_param_7);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns1__get_USCOREbest_USCOREbest_USCOREneighbors_USCOREby_USCOREgeneResponse(soap, &_param_7, "ns1:get_best_best_neighbors_by_geneResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__get_USCOREreverse_USCOREbest_USCOREneighbors_USCOREby_USCOREgene(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string genes_USCOREid, int start, int max_USCOREresults, struct ns1__get_USCOREreverse_USCOREbest_USCOREneighbors_USCOREby_USCOREgeneResponse &_param_8)
{	struct ns1__get_USCOREreverse_USCOREbest_USCOREneighbors_USCOREby_USCOREgene soap_tmp_ns1__get_USCOREreverse_USCOREbest_USCOREneighbors_USCOREby_USCOREgene;
	if (!soap_endpoint)
		soap_endpoint = "http://soap.genome.jp/keggapi/request_v5.0.cgi";
	if (!soap_action)
		soap_action = "SOAP/KEGG#get_reverse_best_neighbors_by_gene";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__get_USCOREreverse_USCOREbest_USCOREneighbors_USCOREby_USCOREgene.genes_USCOREid = genes_USCOREid;
	soap_tmp_ns1__get_USCOREreverse_USCOREbest_USCOREneighbors_USCOREby_USCOREgene.start = start;
	soap_tmp_ns1__get_USCOREreverse_USCOREbest_USCOREneighbors_USCOREby_USCOREgene.max_USCOREresults = max_USCOREresults;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__get_USCOREreverse_USCOREbest_USCOREneighbors_USCOREby_USCOREgene(soap, &soap_tmp_ns1__get_USCOREreverse_USCOREbest_USCOREneighbors_USCOREby_USCOREgene);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__get_USCOREreverse_USCOREbest_USCOREneighbors_USCOREby_USCOREgene(soap, &soap_tmp_ns1__get_USCOREreverse_USCOREbest_USCOREneighbors_USCOREby_USCOREgene, "ns1:get_reverse_best_neighbors_by_gene", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__get_USCOREreverse_USCOREbest_USCOREneighbors_USCOREby_USCOREgene(soap, &soap_tmp_ns1__get_USCOREreverse_USCOREbest_USCOREneighbors_USCOREby_USCOREgene, "ns1:get_reverse_best_neighbors_by_gene", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_ns1__get_USCOREreverse_USCOREbest_USCOREneighbors_USCOREby_USCOREgeneResponse(soap, &_param_8);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns1__get_USCOREreverse_USCOREbest_USCOREneighbors_USCOREby_USCOREgeneResponse(soap, &_param_8, "ns1:get_reverse_best_neighbors_by_geneResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__get_USCOREparalogs_USCOREby_USCOREgene(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string genes_USCOREid, int start, int max_USCOREresults, struct ns1__get_USCOREparalogs_USCOREby_USCOREgeneResponse &_param_9)
{	struct ns1__get_USCOREparalogs_USCOREby_USCOREgene soap_tmp_ns1__get_USCOREparalogs_USCOREby_USCOREgene;
	if (!soap_endpoint)
		soap_endpoint = "http://soap.genome.jp/keggapi/request_v5.0.cgi";
	if (!soap_action)
		soap_action = "SOAP/KEGG#get_paralogs_by_gene";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__get_USCOREparalogs_USCOREby_USCOREgene.genes_USCOREid = genes_USCOREid;
	soap_tmp_ns1__get_USCOREparalogs_USCOREby_USCOREgene.start = start;
	soap_tmp_ns1__get_USCOREparalogs_USCOREby_USCOREgene.max_USCOREresults = max_USCOREresults;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__get_USCOREparalogs_USCOREby_USCOREgene(soap, &soap_tmp_ns1__get_USCOREparalogs_USCOREby_USCOREgene);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__get_USCOREparalogs_USCOREby_USCOREgene(soap, &soap_tmp_ns1__get_USCOREparalogs_USCOREby_USCOREgene, "ns1:get_paralogs_by_gene", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__get_USCOREparalogs_USCOREby_USCOREgene(soap, &soap_tmp_ns1__get_USCOREparalogs_USCOREby_USCOREgene, "ns1:get_paralogs_by_gene", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_ns1__get_USCOREparalogs_USCOREby_USCOREgeneResponse(soap, &_param_9);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns1__get_USCOREparalogs_USCOREby_USCOREgeneResponse(soap, &_param_9, "ns1:get_paralogs_by_geneResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__get_USCOREmotifs_USCOREby_USCOREgene(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string genes_USCOREid, std::string db, struct ns1__get_USCOREmotifs_USCOREby_USCOREgeneResponse &_param_10)
{	struct ns1__get_USCOREmotifs_USCOREby_USCOREgene soap_tmp_ns1__get_USCOREmotifs_USCOREby_USCOREgene;
	if (!soap_endpoint)
		soap_endpoint = "http://soap.genome.jp/keggapi/request_v5.0.cgi";
	if (!soap_action)
		soap_action = "SOAP/KEGG#get_motifs_by_gene";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__get_USCOREmotifs_USCOREby_USCOREgene.genes_USCOREid = genes_USCOREid;
	soap_tmp_ns1__get_USCOREmotifs_USCOREby_USCOREgene.db = db;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__get_USCOREmotifs_USCOREby_USCOREgene(soap, &soap_tmp_ns1__get_USCOREmotifs_USCOREby_USCOREgene);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__get_USCOREmotifs_USCOREby_USCOREgene(soap, &soap_tmp_ns1__get_USCOREmotifs_USCOREby_USCOREgene, "ns1:get_motifs_by_gene", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__get_USCOREmotifs_USCOREby_USCOREgene(soap, &soap_tmp_ns1__get_USCOREmotifs_USCOREby_USCOREgene, "ns1:get_motifs_by_gene", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_ns1__get_USCOREmotifs_USCOREby_USCOREgeneResponse(soap, &_param_10);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns1__get_USCOREmotifs_USCOREby_USCOREgeneResponse(soap, &_param_10, "ns1:get_motifs_by_geneResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__get_USCOREgenes_USCOREby_USCOREmotifs(struct soap *soap, const char *soap_endpoint, const char *soap_action, ArrayOfstring *motif_USCOREid_USCORElist, int start, int max_USCOREresults, struct ns1__get_USCOREgenes_USCOREby_USCOREmotifsResponse &_param_11)
{	struct ns1__get_USCOREgenes_USCOREby_USCOREmotifs soap_tmp_ns1__get_USCOREgenes_USCOREby_USCOREmotifs;
	if (!soap_endpoint)
		soap_endpoint = "http://soap.genome.jp/keggapi/request_v5.0.cgi";
	if (!soap_action)
		soap_action = "SOAP/KEGG#get_genes_by_motifs";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__get_USCOREgenes_USCOREby_USCOREmotifs.motif_USCOREid_USCORElist = motif_USCOREid_USCORElist;
	soap_tmp_ns1__get_USCOREgenes_USCOREby_USCOREmotifs.start = start;
	soap_tmp_ns1__get_USCOREgenes_USCOREby_USCOREmotifs.max_USCOREresults = max_USCOREresults;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__get_USCOREgenes_USCOREby_USCOREmotifs(soap, &soap_tmp_ns1__get_USCOREgenes_USCOREby_USCOREmotifs);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__get_USCOREgenes_USCOREby_USCOREmotifs(soap, &soap_tmp_ns1__get_USCOREgenes_USCOREby_USCOREmotifs, "ns1:get_genes_by_motifs", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__get_USCOREgenes_USCOREby_USCOREmotifs(soap, &soap_tmp_ns1__get_USCOREgenes_USCOREby_USCOREmotifs, "ns1:get_genes_by_motifs", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_ns1__get_USCOREgenes_USCOREby_USCOREmotifsResponse(soap, &_param_11);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns1__get_USCOREgenes_USCOREby_USCOREmotifsResponse(soap, &_param_11, "ns1:get_genes_by_motifsResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__get_USCOREko_USCOREby_USCOREgene(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string genes_USCOREid, struct ns1__get_USCOREko_USCOREby_USCOREgeneResponse &_param_12)
{	struct ns1__get_USCOREko_USCOREby_USCOREgene soap_tmp_ns1__get_USCOREko_USCOREby_USCOREgene;
	if (!soap_endpoint)
		soap_endpoint = "http://soap.genome.jp/keggapi/request_v5.0.cgi";
	if (!soap_action)
		soap_action = "SOAP/KEGG#get_ko_by_gene";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__get_USCOREko_USCOREby_USCOREgene.genes_USCOREid = genes_USCOREid;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__get_USCOREko_USCOREby_USCOREgene(soap, &soap_tmp_ns1__get_USCOREko_USCOREby_USCOREgene);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__get_USCOREko_USCOREby_USCOREgene(soap, &soap_tmp_ns1__get_USCOREko_USCOREby_USCOREgene, "ns1:get_ko_by_gene", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__get_USCOREko_USCOREby_USCOREgene(soap, &soap_tmp_ns1__get_USCOREko_USCOREby_USCOREgene, "ns1:get_ko_by_gene", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_ns1__get_USCOREko_USCOREby_USCOREgeneResponse(soap, &_param_12);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns1__get_USCOREko_USCOREby_USCOREgeneResponse(soap, &_param_12, "ns1:get_ko_by_geneResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__get_USCOREko_USCOREby_USCOREko_USCOREclass(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string class_USCOREid, struct ns1__get_USCOREko_USCOREby_USCOREko_USCOREclassResponse &_param_13)
{	struct ns1__get_USCOREko_USCOREby_USCOREko_USCOREclass soap_tmp_ns1__get_USCOREko_USCOREby_USCOREko_USCOREclass;
	if (!soap_endpoint)
		soap_endpoint = "http://soap.genome.jp/keggapi/request_v5.0.cgi";
	if (!soap_action)
		soap_action = "SOAP/KEGG#get_ko_by_ko_class";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__get_USCOREko_USCOREby_USCOREko_USCOREclass.class_USCOREid = class_USCOREid;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__get_USCOREko_USCOREby_USCOREko_USCOREclass(soap, &soap_tmp_ns1__get_USCOREko_USCOREby_USCOREko_USCOREclass);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__get_USCOREko_USCOREby_USCOREko_USCOREclass(soap, &soap_tmp_ns1__get_USCOREko_USCOREby_USCOREko_USCOREclass, "ns1:get_ko_by_ko_class", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__get_USCOREko_USCOREby_USCOREko_USCOREclass(soap, &soap_tmp_ns1__get_USCOREko_USCOREby_USCOREko_USCOREclass, "ns1:get_ko_by_ko_class", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_ns1__get_USCOREko_USCOREby_USCOREko_USCOREclassResponse(soap, &_param_13);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns1__get_USCOREko_USCOREby_USCOREko_USCOREclassResponse(soap, &_param_13, "ns1:get_ko_by_ko_classResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__get_USCOREgenes_USCOREby_USCOREko(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string ko_USCOREid, std::string org, struct ns1__get_USCOREgenes_USCOREby_USCOREkoResponse &_param_14)
{	struct ns1__get_USCOREgenes_USCOREby_USCOREko soap_tmp_ns1__get_USCOREgenes_USCOREby_USCOREko;
	if (!soap_endpoint)
		soap_endpoint = "http://soap.genome.jp/keggapi/request_v5.0.cgi";
	if (!soap_action)
		soap_action = "SOAP/KEGG#get_genes_by_ko";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__get_USCOREgenes_USCOREby_USCOREko.ko_USCOREid = ko_USCOREid;
	soap_tmp_ns1__get_USCOREgenes_USCOREby_USCOREko.org = org;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__get_USCOREgenes_USCOREby_USCOREko(soap, &soap_tmp_ns1__get_USCOREgenes_USCOREby_USCOREko);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__get_USCOREgenes_USCOREby_USCOREko(soap, &soap_tmp_ns1__get_USCOREgenes_USCOREby_USCOREko, "ns1:get_genes_by_ko", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__get_USCOREgenes_USCOREby_USCOREko(soap, &soap_tmp_ns1__get_USCOREgenes_USCOREby_USCOREko, "ns1:get_genes_by_ko", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_ns1__get_USCOREgenes_USCOREby_USCOREkoResponse(soap, &_param_14);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns1__get_USCOREgenes_USCOREby_USCOREkoResponse(soap, &_param_14, "ns1:get_genes_by_koResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__get_USCOREgenes_USCOREby_USCOREko_USCOREclass(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string class_USCOREid, std::string org, int start, int max_USCOREresults, struct ns1__get_USCOREgenes_USCOREby_USCOREko_USCOREclassResponse &_param_15)
{	struct ns1__get_USCOREgenes_USCOREby_USCOREko_USCOREclass soap_tmp_ns1__get_USCOREgenes_USCOREby_USCOREko_USCOREclass;
	if (!soap_endpoint)
		soap_endpoint = "http://soap.genome.jp/keggapi/request_v5.0.cgi";
	if (!soap_action)
		soap_action = "SOAP/KEGG#get_genes_by_ko_class";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__get_USCOREgenes_USCOREby_USCOREko_USCOREclass.class_USCOREid = class_USCOREid;
	soap_tmp_ns1__get_USCOREgenes_USCOREby_USCOREko_USCOREclass.org = org;
	soap_tmp_ns1__get_USCOREgenes_USCOREby_USCOREko_USCOREclass.start = start;
	soap_tmp_ns1__get_USCOREgenes_USCOREby_USCOREko_USCOREclass.max_USCOREresults = max_USCOREresults;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__get_USCOREgenes_USCOREby_USCOREko_USCOREclass(soap, &soap_tmp_ns1__get_USCOREgenes_USCOREby_USCOREko_USCOREclass);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__get_USCOREgenes_USCOREby_USCOREko_USCOREclass(soap, &soap_tmp_ns1__get_USCOREgenes_USCOREby_USCOREko_USCOREclass, "ns1:get_genes_by_ko_class", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__get_USCOREgenes_USCOREby_USCOREko_USCOREclass(soap, &soap_tmp_ns1__get_USCOREgenes_USCOREby_USCOREko_USCOREclass, "ns1:get_genes_by_ko_class", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_ns1__get_USCOREgenes_USCOREby_USCOREko_USCOREclassResponse(soap, &_param_15);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns1__get_USCOREgenes_USCOREby_USCOREko_USCOREclassResponse(soap, &_param_15, "ns1:get_genes_by_ko_classResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__get_USCOREoc_USCOREmembers_USCOREby_USCOREgene(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string genes_USCOREid, int start, int max_USCOREresults, struct ns1__get_USCOREoc_USCOREmembers_USCOREby_USCOREgeneResponse &_param_16)
{	struct ns1__get_USCOREoc_USCOREmembers_USCOREby_USCOREgene soap_tmp_ns1__get_USCOREoc_USCOREmembers_USCOREby_USCOREgene;
	if (!soap_endpoint)
		soap_endpoint = "http://soap.genome.jp/keggapi/request_v5.0.cgi";
	if (!soap_action)
		soap_action = "SOAP/KEGG#get_oc_members_by_gene";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__get_USCOREoc_USCOREmembers_USCOREby_USCOREgene.genes_USCOREid = genes_USCOREid;
	soap_tmp_ns1__get_USCOREoc_USCOREmembers_USCOREby_USCOREgene.start = start;
	soap_tmp_ns1__get_USCOREoc_USCOREmembers_USCOREby_USCOREgene.max_USCOREresults = max_USCOREresults;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__get_USCOREoc_USCOREmembers_USCOREby_USCOREgene(soap, &soap_tmp_ns1__get_USCOREoc_USCOREmembers_USCOREby_USCOREgene);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__get_USCOREoc_USCOREmembers_USCOREby_USCOREgene(soap, &soap_tmp_ns1__get_USCOREoc_USCOREmembers_USCOREby_USCOREgene, "ns1:get_oc_members_by_gene", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__get_USCOREoc_USCOREmembers_USCOREby_USCOREgene(soap, &soap_tmp_ns1__get_USCOREoc_USCOREmembers_USCOREby_USCOREgene, "ns1:get_oc_members_by_gene", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_ns1__get_USCOREoc_USCOREmembers_USCOREby_USCOREgeneResponse(soap, &_param_16);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns1__get_USCOREoc_USCOREmembers_USCOREby_USCOREgeneResponse(soap, &_param_16, "ns1:get_oc_members_by_geneResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__get_USCOREpc_USCOREmembers_USCOREby_USCOREgene(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string genes_USCOREid, int start, int max_USCOREresults, struct ns1__get_USCOREpc_USCOREmembers_USCOREby_USCOREgeneResponse &_param_17)
{	struct ns1__get_USCOREpc_USCOREmembers_USCOREby_USCOREgene soap_tmp_ns1__get_USCOREpc_USCOREmembers_USCOREby_USCOREgene;
	if (!soap_endpoint)
		soap_endpoint = "http://soap.genome.jp/keggapi/request_v5.0.cgi";
	if (!soap_action)
		soap_action = "SOAP/KEGG#get_pc_members_by_gene";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__get_USCOREpc_USCOREmembers_USCOREby_USCOREgene.genes_USCOREid = genes_USCOREid;
	soap_tmp_ns1__get_USCOREpc_USCOREmembers_USCOREby_USCOREgene.start = start;
	soap_tmp_ns1__get_USCOREpc_USCOREmembers_USCOREby_USCOREgene.max_USCOREresults = max_USCOREresults;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__get_USCOREpc_USCOREmembers_USCOREby_USCOREgene(soap, &soap_tmp_ns1__get_USCOREpc_USCOREmembers_USCOREby_USCOREgene);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__get_USCOREpc_USCOREmembers_USCOREby_USCOREgene(soap, &soap_tmp_ns1__get_USCOREpc_USCOREmembers_USCOREby_USCOREgene, "ns1:get_pc_members_by_gene", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__get_USCOREpc_USCOREmembers_USCOREby_USCOREgene(soap, &soap_tmp_ns1__get_USCOREpc_USCOREmembers_USCOREby_USCOREgene, "ns1:get_pc_members_by_gene", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_ns1__get_USCOREpc_USCOREmembers_USCOREby_USCOREgeneResponse(soap, &_param_17);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns1__get_USCOREpc_USCOREmembers_USCOREby_USCOREgeneResponse(soap, &_param_17, "ns1:get_pc_members_by_geneResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__get_USCOREelements_USCOREby_USCOREpathway(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string pathway_USCOREid, struct ns1__get_USCOREelements_USCOREby_USCOREpathwayResponse &_param_18)
{	struct ns1__get_USCOREelements_USCOREby_USCOREpathway soap_tmp_ns1__get_USCOREelements_USCOREby_USCOREpathway;
	if (!soap_endpoint)
		soap_endpoint = "http://soap.genome.jp/keggapi/request_v5.0.cgi";
	if (!soap_action)
		soap_action = "SOAP/KEGG#get_elements_by_pathway";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__get_USCOREelements_USCOREby_USCOREpathway.pathway_USCOREid = pathway_USCOREid;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__get_USCOREelements_USCOREby_USCOREpathway(soap, &soap_tmp_ns1__get_USCOREelements_USCOREby_USCOREpathway);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__get_USCOREelements_USCOREby_USCOREpathway(soap, &soap_tmp_ns1__get_USCOREelements_USCOREby_USCOREpathway, "ns1:get_elements_by_pathway", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__get_USCOREelements_USCOREby_USCOREpathway(soap, &soap_tmp_ns1__get_USCOREelements_USCOREby_USCOREpathway, "ns1:get_elements_by_pathway", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_ns1__get_USCOREelements_USCOREby_USCOREpathwayResponse(soap, &_param_18);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns1__get_USCOREelements_USCOREby_USCOREpathwayResponse(soap, &_param_18, "ns1:get_elements_by_pathwayResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__get_USCOREelement_USCORErelations_USCOREby_USCOREpathway(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string pathway_USCOREid, struct ns1__get_USCOREelement_USCORErelations_USCOREby_USCOREpathwayResponse &_param_19)
{	struct ns1__get_USCOREelement_USCORErelations_USCOREby_USCOREpathway soap_tmp_ns1__get_USCOREelement_USCORErelations_USCOREby_USCOREpathway;
	if (!soap_endpoint)
		soap_endpoint = "http://soap.genome.jp/keggapi/request_v5.0.cgi";
	if (!soap_action)
		soap_action = "SOAP/KEGG#get_element_relations_by_pathway";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__get_USCOREelement_USCORErelations_USCOREby_USCOREpathway.pathway_USCOREid = pathway_USCOREid;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__get_USCOREelement_USCORErelations_USCOREby_USCOREpathway(soap, &soap_tmp_ns1__get_USCOREelement_USCORErelations_USCOREby_USCOREpathway);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__get_USCOREelement_USCORErelations_USCOREby_USCOREpathway(soap, &soap_tmp_ns1__get_USCOREelement_USCORErelations_USCOREby_USCOREpathway, "ns1:get_element_relations_by_pathway", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__get_USCOREelement_USCORErelations_USCOREby_USCOREpathway(soap, &soap_tmp_ns1__get_USCOREelement_USCORErelations_USCOREby_USCOREpathway, "ns1:get_element_relations_by_pathway", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_ns1__get_USCOREelement_USCORErelations_USCOREby_USCOREpathwayResponse(soap, &_param_19);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns1__get_USCOREelement_USCORErelations_USCOREby_USCOREpathwayResponse(soap, &_param_19, "ns1:get_element_relations_by_pathwayResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__color_USCOREpathway_USCOREby_USCOREelements(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string pathway_USCOREid, ArrayOfint *element_USCORElist, ArrayOfstring *fg_USCOREcolor_USCORElist, ArrayOfstring *bg_USCOREcolor_USCORElist, std::string &return_)
{	struct ns1__color_USCOREpathway_USCOREby_USCOREelements soap_tmp_ns1__color_USCOREpathway_USCOREby_USCOREelements;
	struct ns1__color_USCOREpathway_USCOREby_USCOREelementsResponse *soap_tmp_ns1__color_USCOREpathway_USCOREby_USCOREelementsResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://soap.genome.jp/keggapi/request_v5.0.cgi";
	if (!soap_action)
		soap_action = "SOAP/KEGG#color_pathway_by_elements";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__color_USCOREpathway_USCOREby_USCOREelements.pathway_USCOREid = pathway_USCOREid;
	soap_tmp_ns1__color_USCOREpathway_USCOREby_USCOREelements.element_USCORElist = element_USCORElist;
	soap_tmp_ns1__color_USCOREpathway_USCOREby_USCOREelements.fg_USCOREcolor_USCORElist = fg_USCOREcolor_USCORElist;
	soap_tmp_ns1__color_USCOREpathway_USCOREby_USCOREelements.bg_USCOREcolor_USCORElist = bg_USCOREcolor_USCORElist;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__color_USCOREpathway_USCOREby_USCOREelements(soap, &soap_tmp_ns1__color_USCOREpathway_USCOREby_USCOREelements);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__color_USCOREpathway_USCOREby_USCOREelements(soap, &soap_tmp_ns1__color_USCOREpathway_USCOREby_USCOREelements, "ns1:color_pathway_by_elements", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__color_USCOREpathway_USCOREby_USCOREelements(soap, &soap_tmp_ns1__color_USCOREpathway_USCOREby_USCOREelements, "ns1:color_pathway_by_elements", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_std__string(soap, &return_);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ns1__color_USCOREpathway_USCOREby_USCOREelementsResponse = soap_get_ns1__color_USCOREpathway_USCOREby_USCOREelementsResponse(soap, NULL, "ns1:color_pathway_by_elementsResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return_ = soap_tmp_ns1__color_USCOREpathway_USCOREby_USCOREelementsResponse->return_;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__get_USCOREhtml_USCOREof_USCOREcolored_USCOREpathway_USCOREby_USCOREelements(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string pathway_USCOREid, ArrayOfint *element_USCORElist, ArrayOfstring *fg_USCOREcolor_USCORElist, ArrayOfstring *bg_USCOREcolor_USCORElist, std::string &return_)
{	struct ns1__get_USCOREhtml_USCOREof_USCOREcolored_USCOREpathway_USCOREby_USCOREelements soap_tmp_ns1__get_USCOREhtml_USCOREof_USCOREcolored_USCOREpathway_USCOREby_USCOREelements;
	struct ns1__get_USCOREhtml_USCOREof_USCOREcolored_USCOREpathway_USCOREby_USCOREelementsResponse *soap_tmp_ns1__get_USCOREhtml_USCOREof_USCOREcolored_USCOREpathway_USCOREby_USCOREelementsResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://soap.genome.jp/keggapi/request_v5.0.cgi";
	if (!soap_action)
		soap_action = "SOAP/KEGG#get_html_of_colored_pathway_by_elements";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__get_USCOREhtml_USCOREof_USCOREcolored_USCOREpathway_USCOREby_USCOREelements.pathway_USCOREid = pathway_USCOREid;
	soap_tmp_ns1__get_USCOREhtml_USCOREof_USCOREcolored_USCOREpathway_USCOREby_USCOREelements.element_USCORElist = element_USCORElist;
	soap_tmp_ns1__get_USCOREhtml_USCOREof_USCOREcolored_USCOREpathway_USCOREby_USCOREelements.fg_USCOREcolor_USCORElist = fg_USCOREcolor_USCORElist;
	soap_tmp_ns1__get_USCOREhtml_USCOREof_USCOREcolored_USCOREpathway_USCOREby_USCOREelements.bg_USCOREcolor_USCORElist = bg_USCOREcolor_USCORElist;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__get_USCOREhtml_USCOREof_USCOREcolored_USCOREpathway_USCOREby_USCOREelements(soap, &soap_tmp_ns1__get_USCOREhtml_USCOREof_USCOREcolored_USCOREpathway_USCOREby_USCOREelements);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__get_USCOREhtml_USCOREof_USCOREcolored_USCOREpathway_USCOREby_USCOREelements(soap, &soap_tmp_ns1__get_USCOREhtml_USCOREof_USCOREcolored_USCOREpathway_USCOREby_USCOREelements, "ns1:get_html_of_colored_pathway_by_elements", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__get_USCOREhtml_USCOREof_USCOREcolored_USCOREpathway_USCOREby_USCOREelements(soap, &soap_tmp_ns1__get_USCOREhtml_USCOREof_USCOREcolored_USCOREpathway_USCOREby_USCOREelements, "ns1:get_html_of_colored_pathway_by_elements", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_std__string(soap, &return_);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ns1__get_USCOREhtml_USCOREof_USCOREcolored_USCOREpathway_USCOREby_USCOREelementsResponse = soap_get_ns1__get_USCOREhtml_USCOREof_USCOREcolored_USCOREpathway_USCOREby_USCOREelementsResponse(soap, NULL, "ns1:get_html_of_colored_pathway_by_elementsResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return_ = soap_tmp_ns1__get_USCOREhtml_USCOREof_USCOREcolored_USCOREpathway_USCOREby_USCOREelementsResponse->return_;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__mark_USCOREpathway_USCOREby_USCOREobjects(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string pathway_USCOREid, ArrayOfstring *object_USCOREid_USCORElist, std::string &return_)
{	struct ns1__mark_USCOREpathway_USCOREby_USCOREobjects soap_tmp_ns1__mark_USCOREpathway_USCOREby_USCOREobjects;
	struct ns1__mark_USCOREpathway_USCOREby_USCOREobjectsResponse *soap_tmp_ns1__mark_USCOREpathway_USCOREby_USCOREobjectsResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://soap.genome.jp/keggapi/request_v5.0.cgi";
	if (!soap_action)
		soap_action = "SOAP/KEGG#mark_pathway_by_objects";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__mark_USCOREpathway_USCOREby_USCOREobjects.pathway_USCOREid = pathway_USCOREid;
	soap_tmp_ns1__mark_USCOREpathway_USCOREby_USCOREobjects.object_USCOREid_USCORElist = object_USCOREid_USCORElist;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__mark_USCOREpathway_USCOREby_USCOREobjects(soap, &soap_tmp_ns1__mark_USCOREpathway_USCOREby_USCOREobjects);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__mark_USCOREpathway_USCOREby_USCOREobjects(soap, &soap_tmp_ns1__mark_USCOREpathway_USCOREby_USCOREobjects, "ns1:mark_pathway_by_objects", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__mark_USCOREpathway_USCOREby_USCOREobjects(soap, &soap_tmp_ns1__mark_USCOREpathway_USCOREby_USCOREobjects, "ns1:mark_pathway_by_objects", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_std__string(soap, &return_);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ns1__mark_USCOREpathway_USCOREby_USCOREobjectsResponse = soap_get_ns1__mark_USCOREpathway_USCOREby_USCOREobjectsResponse(soap, NULL, "ns1:mark_pathway_by_objectsResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return_ = soap_tmp_ns1__mark_USCOREpathway_USCOREby_USCOREobjectsResponse->return_;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__color_USCOREpathway_USCOREby_USCOREobjects(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string pathway_USCOREid, ArrayOfstring *object_USCOREid_USCORElist, ArrayOfstring *fg_USCOREcolor_USCORElist, ArrayOfstring *bg_USCOREcolor_USCORElist, std::string &return_)
{	struct ns1__color_USCOREpathway_USCOREby_USCOREobjects soap_tmp_ns1__color_USCOREpathway_USCOREby_USCOREobjects;
	struct ns1__color_USCOREpathway_USCOREby_USCOREobjectsResponse *soap_tmp_ns1__color_USCOREpathway_USCOREby_USCOREobjectsResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://soap.genome.jp/keggapi/request_v5.0.cgi";
	if (!soap_action)
		soap_action = "SOAP/KEGG#color_pathway_by_objects";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__color_USCOREpathway_USCOREby_USCOREobjects.pathway_USCOREid = pathway_USCOREid;
	soap_tmp_ns1__color_USCOREpathway_USCOREby_USCOREobjects.object_USCOREid_USCORElist = object_USCOREid_USCORElist;
	soap_tmp_ns1__color_USCOREpathway_USCOREby_USCOREobjects.fg_USCOREcolor_USCORElist = fg_USCOREcolor_USCORElist;
	soap_tmp_ns1__color_USCOREpathway_USCOREby_USCOREobjects.bg_USCOREcolor_USCORElist = bg_USCOREcolor_USCORElist;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__color_USCOREpathway_USCOREby_USCOREobjects(soap, &soap_tmp_ns1__color_USCOREpathway_USCOREby_USCOREobjects);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__color_USCOREpathway_USCOREby_USCOREobjects(soap, &soap_tmp_ns1__color_USCOREpathway_USCOREby_USCOREobjects, "ns1:color_pathway_by_objects", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__color_USCOREpathway_USCOREby_USCOREobjects(soap, &soap_tmp_ns1__color_USCOREpathway_USCOREby_USCOREobjects, "ns1:color_pathway_by_objects", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_std__string(soap, &return_);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ns1__color_USCOREpathway_USCOREby_USCOREobjectsResponse = soap_get_ns1__color_USCOREpathway_USCOREby_USCOREobjectsResponse(soap, NULL, "ns1:color_pathway_by_objectsResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return_ = soap_tmp_ns1__color_USCOREpathway_USCOREby_USCOREobjectsResponse->return_;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__get_USCOREhtml_USCOREof_USCOREmarked_USCOREpathway_USCOREby_USCOREobjects(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string pathway_USCOREid, ArrayOfstring *object_USCOREid_USCORElist, std::string &return_)
{	struct ns1__get_USCOREhtml_USCOREof_USCOREmarked_USCOREpathway_USCOREby_USCOREobjects soap_tmp_ns1__get_USCOREhtml_USCOREof_USCOREmarked_USCOREpathway_USCOREby_USCOREobjects;
	struct ns1__get_USCOREhtml_USCOREof_USCOREmarked_USCOREpathway_USCOREby_USCOREobjectsResponse *soap_tmp_ns1__get_USCOREhtml_USCOREof_USCOREmarked_USCOREpathway_USCOREby_USCOREobjectsResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://soap.genome.jp/keggapi/request_v5.0.cgi";
	if (!soap_action)
		soap_action = "SOAP/KEGG#get_html_of_marked_pathway_by_objects";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__get_USCOREhtml_USCOREof_USCOREmarked_USCOREpathway_USCOREby_USCOREobjects.pathway_USCOREid = pathway_USCOREid;
	soap_tmp_ns1__get_USCOREhtml_USCOREof_USCOREmarked_USCOREpathway_USCOREby_USCOREobjects.object_USCOREid_USCORElist = object_USCOREid_USCORElist;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__get_USCOREhtml_USCOREof_USCOREmarked_USCOREpathway_USCOREby_USCOREobjects(soap, &soap_tmp_ns1__get_USCOREhtml_USCOREof_USCOREmarked_USCOREpathway_USCOREby_USCOREobjects);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__get_USCOREhtml_USCOREof_USCOREmarked_USCOREpathway_USCOREby_USCOREobjects(soap, &soap_tmp_ns1__get_USCOREhtml_USCOREof_USCOREmarked_USCOREpathway_USCOREby_USCOREobjects, "ns1:get_html_of_marked_pathway_by_objects", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__get_USCOREhtml_USCOREof_USCOREmarked_USCOREpathway_USCOREby_USCOREobjects(soap, &soap_tmp_ns1__get_USCOREhtml_USCOREof_USCOREmarked_USCOREpathway_USCOREby_USCOREobjects, "ns1:get_html_of_marked_pathway_by_objects", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_std__string(soap, &return_);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ns1__get_USCOREhtml_USCOREof_USCOREmarked_USCOREpathway_USCOREby_USCOREobjectsResponse = soap_get_ns1__get_USCOREhtml_USCOREof_USCOREmarked_USCOREpathway_USCOREby_USCOREobjectsResponse(soap, NULL, "ns1:get_html_of_marked_pathway_by_objectsResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return_ = soap_tmp_ns1__get_USCOREhtml_USCOREof_USCOREmarked_USCOREpathway_USCOREby_USCOREobjectsResponse->return_;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__get_USCOREhtml_USCOREof_USCOREcolored_USCOREpathway_USCOREby_USCOREobjects(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string pathway_USCOREid, ArrayOfstring *object_USCOREid_USCORElist, ArrayOfstring *fg_USCOREcolor_USCORElist, ArrayOfstring *bg_USCOREcolor_USCORElist, std::string &return_)
{	struct ns1__get_USCOREhtml_USCOREof_USCOREcolored_USCOREpathway_USCOREby_USCOREobjects soap_tmp_ns1__get_USCOREhtml_USCOREof_USCOREcolored_USCOREpathway_USCOREby_USCOREobjects;
	struct ns1__get_USCOREhtml_USCOREof_USCOREcolored_USCOREpathway_USCOREby_USCOREobjectsResponse *soap_tmp_ns1__get_USCOREhtml_USCOREof_USCOREcolored_USCOREpathway_USCOREby_USCOREobjectsResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://soap.genome.jp/keggapi/request_v5.0.cgi";
	if (!soap_action)
		soap_action = "SOAP/KEGG#get_html_of_colored_pathway_by_objects";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__get_USCOREhtml_USCOREof_USCOREcolored_USCOREpathway_USCOREby_USCOREobjects.pathway_USCOREid = pathway_USCOREid;
	soap_tmp_ns1__get_USCOREhtml_USCOREof_USCOREcolored_USCOREpathway_USCOREby_USCOREobjects.object_USCOREid_USCORElist = object_USCOREid_USCORElist;
	soap_tmp_ns1__get_USCOREhtml_USCOREof_USCOREcolored_USCOREpathway_USCOREby_USCOREobjects.fg_USCOREcolor_USCORElist = fg_USCOREcolor_USCORElist;
	soap_tmp_ns1__get_USCOREhtml_USCOREof_USCOREcolored_USCOREpathway_USCOREby_USCOREobjects.bg_USCOREcolor_USCORElist = bg_USCOREcolor_USCORElist;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__get_USCOREhtml_USCOREof_USCOREcolored_USCOREpathway_USCOREby_USCOREobjects(soap, &soap_tmp_ns1__get_USCOREhtml_USCOREof_USCOREcolored_USCOREpathway_USCOREby_USCOREobjects);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__get_USCOREhtml_USCOREof_USCOREcolored_USCOREpathway_USCOREby_USCOREobjects(soap, &soap_tmp_ns1__get_USCOREhtml_USCOREof_USCOREcolored_USCOREpathway_USCOREby_USCOREobjects, "ns1:get_html_of_colored_pathway_by_objects", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__get_USCOREhtml_USCOREof_USCOREcolored_USCOREpathway_USCOREby_USCOREobjects(soap, &soap_tmp_ns1__get_USCOREhtml_USCOREof_USCOREcolored_USCOREpathway_USCOREby_USCOREobjects, "ns1:get_html_of_colored_pathway_by_objects", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_std__string(soap, &return_);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ns1__get_USCOREhtml_USCOREof_USCOREcolored_USCOREpathway_USCOREby_USCOREobjectsResponse = soap_get_ns1__get_USCOREhtml_USCOREof_USCOREcolored_USCOREpathway_USCOREby_USCOREobjectsResponse(soap, NULL, "ns1:get_html_of_colored_pathway_by_objectsResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return_ = soap_tmp_ns1__get_USCOREhtml_USCOREof_USCOREcolored_USCOREpathway_USCOREby_USCOREobjectsResponse->return_;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__get_USCOREgenes_USCOREby_USCOREpathway(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string pathway_USCOREid, struct ns1__get_USCOREgenes_USCOREby_USCOREpathwayResponse &_param_20)
{	struct ns1__get_USCOREgenes_USCOREby_USCOREpathway soap_tmp_ns1__get_USCOREgenes_USCOREby_USCOREpathway;
	if (!soap_endpoint)
		soap_endpoint = "http://soap.genome.jp/keggapi/request_v5.0.cgi";
	if (!soap_action)
		soap_action = "SOAP/KEGG#get_genes_by_pathway";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__get_USCOREgenes_USCOREby_USCOREpathway.pathway_USCOREid = pathway_USCOREid;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__get_USCOREgenes_USCOREby_USCOREpathway(soap, &soap_tmp_ns1__get_USCOREgenes_USCOREby_USCOREpathway);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__get_USCOREgenes_USCOREby_USCOREpathway(soap, &soap_tmp_ns1__get_USCOREgenes_USCOREby_USCOREpathway, "ns1:get_genes_by_pathway", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__get_USCOREgenes_USCOREby_USCOREpathway(soap, &soap_tmp_ns1__get_USCOREgenes_USCOREby_USCOREpathway, "ns1:get_genes_by_pathway", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_ns1__get_USCOREgenes_USCOREby_USCOREpathwayResponse(soap, &_param_20);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns1__get_USCOREgenes_USCOREby_USCOREpathwayResponse(soap, &_param_20, "ns1:get_genes_by_pathwayResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__get_USCOREenzymes_USCOREby_USCOREpathway(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string pathway_USCOREid, struct ns1__get_USCOREenzymes_USCOREby_USCOREpathwayResponse &_param_21)
{	struct ns1__get_USCOREenzymes_USCOREby_USCOREpathway soap_tmp_ns1__get_USCOREenzymes_USCOREby_USCOREpathway;
	if (!soap_endpoint)
		soap_endpoint = "http://soap.genome.jp/keggapi/request_v5.0.cgi";
	if (!soap_action)
		soap_action = "SOAP/KEGG#get_enzymes_by_pathway";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__get_USCOREenzymes_USCOREby_USCOREpathway.pathway_USCOREid = pathway_USCOREid;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__get_USCOREenzymes_USCOREby_USCOREpathway(soap, &soap_tmp_ns1__get_USCOREenzymes_USCOREby_USCOREpathway);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__get_USCOREenzymes_USCOREby_USCOREpathway(soap, &soap_tmp_ns1__get_USCOREenzymes_USCOREby_USCOREpathway, "ns1:get_enzymes_by_pathway", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__get_USCOREenzymes_USCOREby_USCOREpathway(soap, &soap_tmp_ns1__get_USCOREenzymes_USCOREby_USCOREpathway, "ns1:get_enzymes_by_pathway", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_ns1__get_USCOREenzymes_USCOREby_USCOREpathwayResponse(soap, &_param_21);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns1__get_USCOREenzymes_USCOREby_USCOREpathwayResponse(soap, &_param_21, "ns1:get_enzymes_by_pathwayResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__get_USCOREreactions_USCOREby_USCOREpathway(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string pathway_USCOREid, struct ns1__get_USCOREreactions_USCOREby_USCOREpathwayResponse &_param_22)
{	struct ns1__get_USCOREreactions_USCOREby_USCOREpathway soap_tmp_ns1__get_USCOREreactions_USCOREby_USCOREpathway;
	if (!soap_endpoint)
		soap_endpoint = "http://soap.genome.jp/keggapi/request_v5.0.cgi";
	if (!soap_action)
		soap_action = "SOAP/KEGG#get_reactions_by_pathway";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__get_USCOREreactions_USCOREby_USCOREpathway.pathway_USCOREid = pathway_USCOREid;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__get_USCOREreactions_USCOREby_USCOREpathway(soap, &soap_tmp_ns1__get_USCOREreactions_USCOREby_USCOREpathway);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__get_USCOREreactions_USCOREby_USCOREpathway(soap, &soap_tmp_ns1__get_USCOREreactions_USCOREby_USCOREpathway, "ns1:get_reactions_by_pathway", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__get_USCOREreactions_USCOREby_USCOREpathway(soap, &soap_tmp_ns1__get_USCOREreactions_USCOREby_USCOREpathway, "ns1:get_reactions_by_pathway", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_ns1__get_USCOREreactions_USCOREby_USCOREpathwayResponse(soap, &_param_22);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns1__get_USCOREreactions_USCOREby_USCOREpathwayResponse(soap, &_param_22, "ns1:get_reactions_by_pathwayResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__get_USCOREpathways_USCOREby_USCOREgenes(struct soap *soap, const char *soap_endpoint, const char *soap_action, ArrayOfstring *genes_USCOREid_USCORElist, struct ns1__get_USCOREpathways_USCOREby_USCOREgenesResponse &_param_23)
{	struct ns1__get_USCOREpathways_USCOREby_USCOREgenes soap_tmp_ns1__get_USCOREpathways_USCOREby_USCOREgenes;
	if (!soap_endpoint)
		soap_endpoint = "http://soap.genome.jp/keggapi/request_v5.0.cgi";
	if (!soap_action)
		soap_action = "SOAP/KEGG#get_pathways_by_genes";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__get_USCOREpathways_USCOREby_USCOREgenes.genes_USCOREid_USCORElist = genes_USCOREid_USCORElist;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__get_USCOREpathways_USCOREby_USCOREgenes(soap, &soap_tmp_ns1__get_USCOREpathways_USCOREby_USCOREgenes);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__get_USCOREpathways_USCOREby_USCOREgenes(soap, &soap_tmp_ns1__get_USCOREpathways_USCOREby_USCOREgenes, "ns1:get_pathways_by_genes", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__get_USCOREpathways_USCOREby_USCOREgenes(soap, &soap_tmp_ns1__get_USCOREpathways_USCOREby_USCOREgenes, "ns1:get_pathways_by_genes", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_ns1__get_USCOREpathways_USCOREby_USCOREgenesResponse(soap, &_param_23);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns1__get_USCOREpathways_USCOREby_USCOREgenesResponse(soap, &_param_23, "ns1:get_pathways_by_genesResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__get_USCOREpathways_USCOREby_USCOREenzymes(struct soap *soap, const char *soap_endpoint, const char *soap_action, ArrayOfstring *enzyme_USCOREid_USCORElist, struct ns1__get_USCOREpathways_USCOREby_USCOREenzymesResponse &_param_24)
{	struct ns1__get_USCOREpathways_USCOREby_USCOREenzymes soap_tmp_ns1__get_USCOREpathways_USCOREby_USCOREenzymes;
	if (!soap_endpoint)
		soap_endpoint = "http://soap.genome.jp/keggapi/request_v5.0.cgi";
	if (!soap_action)
		soap_action = "SOAP/KEGG#get_pathways_by_enzymes";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__get_USCOREpathways_USCOREby_USCOREenzymes.enzyme_USCOREid_USCORElist = enzyme_USCOREid_USCORElist;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__get_USCOREpathways_USCOREby_USCOREenzymes(soap, &soap_tmp_ns1__get_USCOREpathways_USCOREby_USCOREenzymes);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__get_USCOREpathways_USCOREby_USCOREenzymes(soap, &soap_tmp_ns1__get_USCOREpathways_USCOREby_USCOREenzymes, "ns1:get_pathways_by_enzymes", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__get_USCOREpathways_USCOREby_USCOREenzymes(soap, &soap_tmp_ns1__get_USCOREpathways_USCOREby_USCOREenzymes, "ns1:get_pathways_by_enzymes", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_ns1__get_USCOREpathways_USCOREby_USCOREenzymesResponse(soap, &_param_24);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns1__get_USCOREpathways_USCOREby_USCOREenzymesResponse(soap, &_param_24, "ns1:get_pathways_by_enzymesResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__get_USCOREpathways_USCOREby_USCOREreactions(struct soap *soap, const char *soap_endpoint, const char *soap_action, ArrayOfstring *reaction_USCOREid_USCORElist, struct ns1__get_USCOREpathways_USCOREby_USCOREreactionsResponse &_param_25)
{	struct ns1__get_USCOREpathways_USCOREby_USCOREreactions soap_tmp_ns1__get_USCOREpathways_USCOREby_USCOREreactions;
	if (!soap_endpoint)
		soap_endpoint = "http://soap.genome.jp/keggapi/request_v5.0.cgi";
	if (!soap_action)
		soap_action = "SOAP/KEGG#get_pathways_by_reactions";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__get_USCOREpathways_USCOREby_USCOREreactions.reaction_USCOREid_USCORElist = reaction_USCOREid_USCORElist;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__get_USCOREpathways_USCOREby_USCOREreactions(soap, &soap_tmp_ns1__get_USCOREpathways_USCOREby_USCOREreactions);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__get_USCOREpathways_USCOREby_USCOREreactions(soap, &soap_tmp_ns1__get_USCOREpathways_USCOREby_USCOREreactions, "ns1:get_pathways_by_reactions", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__get_USCOREpathways_USCOREby_USCOREreactions(soap, &soap_tmp_ns1__get_USCOREpathways_USCOREby_USCOREreactions, "ns1:get_pathways_by_reactions", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_ns1__get_USCOREpathways_USCOREby_USCOREreactionsResponse(soap, &_param_25);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns1__get_USCOREpathways_USCOREby_USCOREreactionsResponse(soap, &_param_25, "ns1:get_pathways_by_reactionsResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__get_USCORElinked_USCOREpathways(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string pathway_USCOREid, struct ns1__get_USCORElinked_USCOREpathwaysResponse &_param_26)
{	struct ns1__get_USCORElinked_USCOREpathways soap_tmp_ns1__get_USCORElinked_USCOREpathways;
	if (!soap_endpoint)
		soap_endpoint = "http://soap.genome.jp/keggapi/request_v5.0.cgi";
	if (!soap_action)
		soap_action = "SOAP/KEGG#get_linked_pathways";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__get_USCORElinked_USCOREpathways.pathway_USCOREid = pathway_USCOREid;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__get_USCORElinked_USCOREpathways(soap, &soap_tmp_ns1__get_USCORElinked_USCOREpathways);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__get_USCORElinked_USCOREpathways(soap, &soap_tmp_ns1__get_USCORElinked_USCOREpathways, "ns1:get_linked_pathways", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__get_USCORElinked_USCOREpathways(soap, &soap_tmp_ns1__get_USCORElinked_USCOREpathways, "ns1:get_linked_pathways", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_ns1__get_USCORElinked_USCOREpathwaysResponse(soap, &_param_26);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns1__get_USCORElinked_USCOREpathwaysResponse(soap, &_param_26, "ns1:get_linked_pathwaysResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__get_USCOREgenes_USCOREby_USCOREenzyme(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string enzyme_USCOREid, std::string org, struct ns1__get_USCOREgenes_USCOREby_USCOREenzymeResponse &_param_27)
{	struct ns1__get_USCOREgenes_USCOREby_USCOREenzyme soap_tmp_ns1__get_USCOREgenes_USCOREby_USCOREenzyme;
	if (!soap_endpoint)
		soap_endpoint = "http://soap.genome.jp/keggapi/request_v5.0.cgi";
	if (!soap_action)
		soap_action = "SOAP/KEGG#get_genes_by_enzyme";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__get_USCOREgenes_USCOREby_USCOREenzyme.enzyme_USCOREid = enzyme_USCOREid;
	soap_tmp_ns1__get_USCOREgenes_USCOREby_USCOREenzyme.org = org;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__get_USCOREgenes_USCOREby_USCOREenzyme(soap, &soap_tmp_ns1__get_USCOREgenes_USCOREby_USCOREenzyme);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__get_USCOREgenes_USCOREby_USCOREenzyme(soap, &soap_tmp_ns1__get_USCOREgenes_USCOREby_USCOREenzyme, "ns1:get_genes_by_enzyme", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__get_USCOREgenes_USCOREby_USCOREenzyme(soap, &soap_tmp_ns1__get_USCOREgenes_USCOREby_USCOREenzyme, "ns1:get_genes_by_enzyme", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_ns1__get_USCOREgenes_USCOREby_USCOREenzymeResponse(soap, &_param_27);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns1__get_USCOREgenes_USCOREby_USCOREenzymeResponse(soap, &_param_27, "ns1:get_genes_by_enzymeResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__get_USCOREenzymes_USCOREby_USCOREgene(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string genes_USCOREid, struct ns1__get_USCOREenzymes_USCOREby_USCOREgeneResponse &_param_28)
{	struct ns1__get_USCOREenzymes_USCOREby_USCOREgene soap_tmp_ns1__get_USCOREenzymes_USCOREby_USCOREgene;
	if (!soap_endpoint)
		soap_endpoint = "http://soap.genome.jp/keggapi/request_v5.0.cgi";
	if (!soap_action)
		soap_action = "SOAP/KEGG#get_enzymes_by_gene";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__get_USCOREenzymes_USCOREby_USCOREgene.genes_USCOREid = genes_USCOREid;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__get_USCOREenzymes_USCOREby_USCOREgene(soap, &soap_tmp_ns1__get_USCOREenzymes_USCOREby_USCOREgene);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__get_USCOREenzymes_USCOREby_USCOREgene(soap, &soap_tmp_ns1__get_USCOREenzymes_USCOREby_USCOREgene, "ns1:get_enzymes_by_gene", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__get_USCOREenzymes_USCOREby_USCOREgene(soap, &soap_tmp_ns1__get_USCOREenzymes_USCOREby_USCOREgene, "ns1:get_enzymes_by_gene", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_ns1__get_USCOREenzymes_USCOREby_USCOREgeneResponse(soap, &_param_28);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns1__get_USCOREenzymes_USCOREby_USCOREgeneResponse(soap, &_param_28, "ns1:get_enzymes_by_geneResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__get_USCOREenzymes_USCOREby_USCOREreaction(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string reaction_USCOREid, struct ns1__get_USCOREenzymes_USCOREby_USCOREreactionResponse &_param_29)
{	struct ns1__get_USCOREenzymes_USCOREby_USCOREreaction soap_tmp_ns1__get_USCOREenzymes_USCOREby_USCOREreaction;
	if (!soap_endpoint)
		soap_endpoint = "http://soap.genome.jp/keggapi/request_v5.0.cgi";
	if (!soap_action)
		soap_action = "SOAP/KEGG#get_enzymes_by_reaction";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__get_USCOREenzymes_USCOREby_USCOREreaction.reaction_USCOREid = reaction_USCOREid;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__get_USCOREenzymes_USCOREby_USCOREreaction(soap, &soap_tmp_ns1__get_USCOREenzymes_USCOREby_USCOREreaction);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__get_USCOREenzymes_USCOREby_USCOREreaction(soap, &soap_tmp_ns1__get_USCOREenzymes_USCOREby_USCOREreaction, "ns1:get_enzymes_by_reaction", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__get_USCOREenzymes_USCOREby_USCOREreaction(soap, &soap_tmp_ns1__get_USCOREenzymes_USCOREby_USCOREreaction, "ns1:get_enzymes_by_reaction", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_ns1__get_USCOREenzymes_USCOREby_USCOREreactionResponse(soap, &_param_29);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns1__get_USCOREenzymes_USCOREby_USCOREreactionResponse(soap, &_param_29, "ns1:get_enzymes_by_reactionResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__get_USCOREreactions_USCOREby_USCOREenzyme(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string enzyme_USCOREid, struct ns1__get_USCOREreactions_USCOREby_USCOREenzymeResponse &_param_30)
{	struct ns1__get_USCOREreactions_USCOREby_USCOREenzyme soap_tmp_ns1__get_USCOREreactions_USCOREby_USCOREenzyme;
	if (!soap_endpoint)
		soap_endpoint = "http://soap.genome.jp/keggapi/request_v5.0.cgi";
	if (!soap_action)
		soap_action = "SOAP/KEGG#get_reactions_by_enzyme";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__get_USCOREreactions_USCOREby_USCOREenzyme.enzyme_USCOREid = enzyme_USCOREid;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__get_USCOREreactions_USCOREby_USCOREenzyme(soap, &soap_tmp_ns1__get_USCOREreactions_USCOREby_USCOREenzyme);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__get_USCOREreactions_USCOREby_USCOREenzyme(soap, &soap_tmp_ns1__get_USCOREreactions_USCOREby_USCOREenzyme, "ns1:get_reactions_by_enzyme", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__get_USCOREreactions_USCOREby_USCOREenzyme(soap, &soap_tmp_ns1__get_USCOREreactions_USCOREby_USCOREenzyme, "ns1:get_reactions_by_enzyme", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_ns1__get_USCOREreactions_USCOREby_USCOREenzymeResponse(soap, &_param_30);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns1__get_USCOREreactions_USCOREby_USCOREenzymeResponse(soap, &_param_30, "ns1:get_reactions_by_enzymeResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__get_USCOREgenes_USCOREby_USCOREorganism(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string org, int start, int max_USCOREresults, struct ns1__get_USCOREgenes_USCOREby_USCOREorganismResponse &_param_31)
{	struct ns1__get_USCOREgenes_USCOREby_USCOREorganism soap_tmp_ns1__get_USCOREgenes_USCOREby_USCOREorganism;
	if (!soap_endpoint)
		soap_endpoint = "http://soap.genome.jp/keggapi/request_v5.0.cgi";
	if (!soap_action)
		soap_action = "SOAP/KEGG#get_genes_by_organism";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__get_USCOREgenes_USCOREby_USCOREorganism.org = org;
	soap_tmp_ns1__get_USCOREgenes_USCOREby_USCOREorganism.start = start;
	soap_tmp_ns1__get_USCOREgenes_USCOREby_USCOREorganism.max_USCOREresults = max_USCOREresults;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__get_USCOREgenes_USCOREby_USCOREorganism(soap, &soap_tmp_ns1__get_USCOREgenes_USCOREby_USCOREorganism);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__get_USCOREgenes_USCOREby_USCOREorganism(soap, &soap_tmp_ns1__get_USCOREgenes_USCOREby_USCOREorganism, "ns1:get_genes_by_organism", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__get_USCOREgenes_USCOREby_USCOREorganism(soap, &soap_tmp_ns1__get_USCOREgenes_USCOREby_USCOREorganism, "ns1:get_genes_by_organism", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_ns1__get_USCOREgenes_USCOREby_USCOREorganismResponse(soap, &_param_31);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns1__get_USCOREgenes_USCOREby_USCOREorganismResponse(soap, &_param_31, "ns1:get_genes_by_organismResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__get_USCOREnumber_USCOREof_USCOREgenes_USCOREby_USCOREorganism(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string abbr, int &return_)
{	struct ns1__get_USCOREnumber_USCOREof_USCOREgenes_USCOREby_USCOREorganism soap_tmp_ns1__get_USCOREnumber_USCOREof_USCOREgenes_USCOREby_USCOREorganism;
	struct ns1__get_USCOREnumber_USCOREof_USCOREgenes_USCOREby_USCOREorganismResponse *soap_tmp_ns1__get_USCOREnumber_USCOREof_USCOREgenes_USCOREby_USCOREorganismResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://soap.genome.jp/keggapi/request_v5.0.cgi";
	if (!soap_action)
		soap_action = "SOAP/KEGG#get_number_of_genes_by_organism";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__get_USCOREnumber_USCOREof_USCOREgenes_USCOREby_USCOREorganism.abbr = abbr;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__get_USCOREnumber_USCOREof_USCOREgenes_USCOREby_USCOREorganism(soap, &soap_tmp_ns1__get_USCOREnumber_USCOREof_USCOREgenes_USCOREby_USCOREorganism);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__get_USCOREnumber_USCOREof_USCOREgenes_USCOREby_USCOREorganism(soap, &soap_tmp_ns1__get_USCOREnumber_USCOREof_USCOREgenes_USCOREby_USCOREorganism, "ns1:get_number_of_genes_by_organism", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__get_USCOREnumber_USCOREof_USCOREgenes_USCOREby_USCOREorganism(soap, &soap_tmp_ns1__get_USCOREnumber_USCOREof_USCOREgenes_USCOREby_USCOREorganism, "ns1:get_number_of_genes_by_organism", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_int(soap, &return_);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ns1__get_USCOREnumber_USCOREof_USCOREgenes_USCOREby_USCOREorganismResponse = soap_get_ns1__get_USCOREnumber_USCOREof_USCOREgenes_USCOREby_USCOREorganismResponse(soap, NULL, "ns1:get_number_of_genes_by_organismResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return_ = soap_tmp_ns1__get_USCOREnumber_USCOREof_USCOREgenes_USCOREby_USCOREorganismResponse->return_;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__get_USCOREreactions_USCOREby_USCOREglycan(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string glycan_USCOREid, struct ns1__get_USCOREreactions_USCOREby_USCOREglycanResponse &_param_32)
{	struct ns1__get_USCOREreactions_USCOREby_USCOREglycan soap_tmp_ns1__get_USCOREreactions_USCOREby_USCOREglycan;
	if (!soap_endpoint)
		soap_endpoint = "http://soap.genome.jp/keggapi/request_v5.0.cgi";
	if (!soap_action)
		soap_action = "SOAP/KEGG#get_reactions_by_glycan";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__get_USCOREreactions_USCOREby_USCOREglycan.glycan_USCOREid = glycan_USCOREid;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__get_USCOREreactions_USCOREby_USCOREglycan(soap, &soap_tmp_ns1__get_USCOREreactions_USCOREby_USCOREglycan);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__get_USCOREreactions_USCOREby_USCOREglycan(soap, &soap_tmp_ns1__get_USCOREreactions_USCOREby_USCOREglycan, "ns1:get_reactions_by_glycan", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__get_USCOREreactions_USCOREby_USCOREglycan(soap, &soap_tmp_ns1__get_USCOREreactions_USCOREby_USCOREglycan, "ns1:get_reactions_by_glycan", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_ns1__get_USCOREreactions_USCOREby_USCOREglycanResponse(soap, &_param_32);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns1__get_USCOREreactions_USCOREby_USCOREglycanResponse(soap, &_param_32, "ns1:get_reactions_by_glycanResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__get_USCOREreactions_USCOREby_USCOREcompound(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string compound_USCOREid, struct ns1__get_USCOREreactions_USCOREby_USCOREcompoundResponse &_param_33)
{	struct ns1__get_USCOREreactions_USCOREby_USCOREcompound soap_tmp_ns1__get_USCOREreactions_USCOREby_USCOREcompound;
	if (!soap_endpoint)
		soap_endpoint = "http://soap.genome.jp/keggapi/request_v5.0.cgi";
	if (!soap_action)
		soap_action = "SOAP/KEGG#get_reactions_by_compound";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__get_USCOREreactions_USCOREby_USCOREcompound.compound_USCOREid = compound_USCOREid;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__get_USCOREreactions_USCOREby_USCOREcompound(soap, &soap_tmp_ns1__get_USCOREreactions_USCOREby_USCOREcompound);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__get_USCOREreactions_USCOREby_USCOREcompound(soap, &soap_tmp_ns1__get_USCOREreactions_USCOREby_USCOREcompound, "ns1:get_reactions_by_compound", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__get_USCOREreactions_USCOREby_USCOREcompound(soap, &soap_tmp_ns1__get_USCOREreactions_USCOREby_USCOREcompound, "ns1:get_reactions_by_compound", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_ns1__get_USCOREreactions_USCOREby_USCOREcompoundResponse(soap, &_param_33);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns1__get_USCOREreactions_USCOREby_USCOREcompoundResponse(soap, &_param_33, "ns1:get_reactions_by_compoundResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__get_USCOREenzymes_USCOREby_USCOREglycan(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string glycan_USCOREid, struct ns1__get_USCOREenzymes_USCOREby_USCOREglycanResponse &_param_34)
{	struct ns1__get_USCOREenzymes_USCOREby_USCOREglycan soap_tmp_ns1__get_USCOREenzymes_USCOREby_USCOREglycan;
	if (!soap_endpoint)
		soap_endpoint = "http://soap.genome.jp/keggapi/request_v5.0.cgi";
	if (!soap_action)
		soap_action = "SOAP/KEGG#get_enzymes_by_glycan";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__get_USCOREenzymes_USCOREby_USCOREglycan.glycan_USCOREid = glycan_USCOREid;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__get_USCOREenzymes_USCOREby_USCOREglycan(soap, &soap_tmp_ns1__get_USCOREenzymes_USCOREby_USCOREglycan);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__get_USCOREenzymes_USCOREby_USCOREglycan(soap, &soap_tmp_ns1__get_USCOREenzymes_USCOREby_USCOREglycan, "ns1:get_enzymes_by_glycan", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__get_USCOREenzymes_USCOREby_USCOREglycan(soap, &soap_tmp_ns1__get_USCOREenzymes_USCOREby_USCOREglycan, "ns1:get_enzymes_by_glycan", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_ns1__get_USCOREenzymes_USCOREby_USCOREglycanResponse(soap, &_param_34);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns1__get_USCOREenzymes_USCOREby_USCOREglycanResponse(soap, &_param_34, "ns1:get_enzymes_by_glycanResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__get_USCOREenzymes_USCOREby_USCOREcompound(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string compound_USCOREid, struct ns1__get_USCOREenzymes_USCOREby_USCOREcompoundResponse &_param_35)
{	struct ns1__get_USCOREenzymes_USCOREby_USCOREcompound soap_tmp_ns1__get_USCOREenzymes_USCOREby_USCOREcompound;
	if (!soap_endpoint)
		soap_endpoint = "http://soap.genome.jp/keggapi/request_v5.0.cgi";
	if (!soap_action)
		soap_action = "SOAP/KEGG#get_enzymes_by_compound";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__get_USCOREenzymes_USCOREby_USCOREcompound.compound_USCOREid = compound_USCOREid;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__get_USCOREenzymes_USCOREby_USCOREcompound(soap, &soap_tmp_ns1__get_USCOREenzymes_USCOREby_USCOREcompound);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__get_USCOREenzymes_USCOREby_USCOREcompound(soap, &soap_tmp_ns1__get_USCOREenzymes_USCOREby_USCOREcompound, "ns1:get_enzymes_by_compound", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__get_USCOREenzymes_USCOREby_USCOREcompound(soap, &soap_tmp_ns1__get_USCOREenzymes_USCOREby_USCOREcompound, "ns1:get_enzymes_by_compound", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_ns1__get_USCOREenzymes_USCOREby_USCOREcompoundResponse(soap, &_param_35);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns1__get_USCOREenzymes_USCOREby_USCOREcompoundResponse(soap, &_param_35, "ns1:get_enzymes_by_compoundResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__get_USCOREpathways_USCOREby_USCOREcompounds(struct soap *soap, const char *soap_endpoint, const char *soap_action, ArrayOfstring *compound_USCOREid_USCORElist, struct ns1__get_USCOREpathways_USCOREby_USCOREcompoundsResponse &_param_36)
{	struct ns1__get_USCOREpathways_USCOREby_USCOREcompounds soap_tmp_ns1__get_USCOREpathways_USCOREby_USCOREcompounds;
	if (!soap_endpoint)
		soap_endpoint = "http://soap.genome.jp/keggapi/request_v5.0.cgi";
	if (!soap_action)
		soap_action = "SOAP/KEGG#get_pathways_by_compounds";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__get_USCOREpathways_USCOREby_USCOREcompounds.compound_USCOREid_USCORElist = compound_USCOREid_USCORElist;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__get_USCOREpathways_USCOREby_USCOREcompounds(soap, &soap_tmp_ns1__get_USCOREpathways_USCOREby_USCOREcompounds);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__get_USCOREpathways_USCOREby_USCOREcompounds(soap, &soap_tmp_ns1__get_USCOREpathways_USCOREby_USCOREcompounds, "ns1:get_pathways_by_compounds", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__get_USCOREpathways_USCOREby_USCOREcompounds(soap, &soap_tmp_ns1__get_USCOREpathways_USCOREby_USCOREcompounds, "ns1:get_pathways_by_compounds", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_ns1__get_USCOREpathways_USCOREby_USCOREcompoundsResponse(soap, &_param_36);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns1__get_USCOREpathways_USCOREby_USCOREcompoundsResponse(soap, &_param_36, "ns1:get_pathways_by_compoundsResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__get_USCOREpathways_USCOREby_USCOREglycans(struct soap *soap, const char *soap_endpoint, const char *soap_action, ArrayOfstring *glycan_USCOREid_USCORElist, struct ns1__get_USCOREpathways_USCOREby_USCOREglycansResponse &_param_37)
{	struct ns1__get_USCOREpathways_USCOREby_USCOREglycans soap_tmp_ns1__get_USCOREpathways_USCOREby_USCOREglycans;
	if (!soap_endpoint)
		soap_endpoint = "http://soap.genome.jp/keggapi/request_v5.0.cgi";
	if (!soap_action)
		soap_action = "SOAP/KEGG#get_pathways_by_glycans";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__get_USCOREpathways_USCOREby_USCOREglycans.glycan_USCOREid_USCORElist = glycan_USCOREid_USCORElist;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__get_USCOREpathways_USCOREby_USCOREglycans(soap, &soap_tmp_ns1__get_USCOREpathways_USCOREby_USCOREglycans);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__get_USCOREpathways_USCOREby_USCOREglycans(soap, &soap_tmp_ns1__get_USCOREpathways_USCOREby_USCOREglycans, "ns1:get_pathways_by_glycans", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__get_USCOREpathways_USCOREby_USCOREglycans(soap, &soap_tmp_ns1__get_USCOREpathways_USCOREby_USCOREglycans, "ns1:get_pathways_by_glycans", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_ns1__get_USCOREpathways_USCOREby_USCOREglycansResponse(soap, &_param_37);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns1__get_USCOREpathways_USCOREby_USCOREglycansResponse(soap, &_param_37, "ns1:get_pathways_by_glycansResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__get_USCOREcompounds_USCOREby_USCOREpathway(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string pathway_USCOREid, struct ns1__get_USCOREcompounds_USCOREby_USCOREpathwayResponse &_param_38)
{	struct ns1__get_USCOREcompounds_USCOREby_USCOREpathway soap_tmp_ns1__get_USCOREcompounds_USCOREby_USCOREpathway;
	if (!soap_endpoint)
		soap_endpoint = "http://soap.genome.jp/keggapi/request_v5.0.cgi";
	if (!soap_action)
		soap_action = "SOAP/KEGG#get_compounds_by_pathway";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__get_USCOREcompounds_USCOREby_USCOREpathway.pathway_USCOREid = pathway_USCOREid;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__get_USCOREcompounds_USCOREby_USCOREpathway(soap, &soap_tmp_ns1__get_USCOREcompounds_USCOREby_USCOREpathway);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__get_USCOREcompounds_USCOREby_USCOREpathway(soap, &soap_tmp_ns1__get_USCOREcompounds_USCOREby_USCOREpathway, "ns1:get_compounds_by_pathway", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__get_USCOREcompounds_USCOREby_USCOREpathway(soap, &soap_tmp_ns1__get_USCOREcompounds_USCOREby_USCOREpathway, "ns1:get_compounds_by_pathway", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_ns1__get_USCOREcompounds_USCOREby_USCOREpathwayResponse(soap, &_param_38);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns1__get_USCOREcompounds_USCOREby_USCOREpathwayResponse(soap, &_param_38, "ns1:get_compounds_by_pathwayResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__get_USCOREglycans_USCOREby_USCOREpathway(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string pathway_USCOREid, struct ns1__get_USCOREglycans_USCOREby_USCOREpathwayResponse &_param_39)
{	struct ns1__get_USCOREglycans_USCOREby_USCOREpathway soap_tmp_ns1__get_USCOREglycans_USCOREby_USCOREpathway;
	if (!soap_endpoint)
		soap_endpoint = "http://soap.genome.jp/keggapi/request_v5.0.cgi";
	if (!soap_action)
		soap_action = "SOAP/KEGG#get_glycans_by_pathway";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__get_USCOREglycans_USCOREby_USCOREpathway.pathway_USCOREid = pathway_USCOREid;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__get_USCOREglycans_USCOREby_USCOREpathway(soap, &soap_tmp_ns1__get_USCOREglycans_USCOREby_USCOREpathway);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__get_USCOREglycans_USCOREby_USCOREpathway(soap, &soap_tmp_ns1__get_USCOREglycans_USCOREby_USCOREpathway, "ns1:get_glycans_by_pathway", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__get_USCOREglycans_USCOREby_USCOREpathway(soap, &soap_tmp_ns1__get_USCOREglycans_USCOREby_USCOREpathway, "ns1:get_glycans_by_pathway", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_ns1__get_USCOREglycans_USCOREby_USCOREpathwayResponse(soap, &_param_39);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns1__get_USCOREglycans_USCOREby_USCOREpathwayResponse(soap, &_param_39, "ns1:get_glycans_by_pathwayResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__get_USCOREcompounds_USCOREby_USCOREreaction(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string reaction_USCOREid, struct ns1__get_USCOREcompounds_USCOREby_USCOREreactionResponse &_param_40)
{	struct ns1__get_USCOREcompounds_USCOREby_USCOREreaction soap_tmp_ns1__get_USCOREcompounds_USCOREby_USCOREreaction;
	if (!soap_endpoint)
		soap_endpoint = "http://soap.genome.jp/keggapi/request_v5.0.cgi";
	if (!soap_action)
		soap_action = "SOAP/KEGG#get_compounds_by_reaction";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__get_USCOREcompounds_USCOREby_USCOREreaction.reaction_USCOREid = reaction_USCOREid;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__get_USCOREcompounds_USCOREby_USCOREreaction(soap, &soap_tmp_ns1__get_USCOREcompounds_USCOREby_USCOREreaction);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__get_USCOREcompounds_USCOREby_USCOREreaction(soap, &soap_tmp_ns1__get_USCOREcompounds_USCOREby_USCOREreaction, "ns1:get_compounds_by_reaction", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__get_USCOREcompounds_USCOREby_USCOREreaction(soap, &soap_tmp_ns1__get_USCOREcompounds_USCOREby_USCOREreaction, "ns1:get_compounds_by_reaction", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_ns1__get_USCOREcompounds_USCOREby_USCOREreactionResponse(soap, &_param_40);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns1__get_USCOREcompounds_USCOREby_USCOREreactionResponse(soap, &_param_40, "ns1:get_compounds_by_reactionResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__get_USCOREglycans_USCOREby_USCOREreaction(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string reaction_USCOREid, struct ns1__get_USCOREglycans_USCOREby_USCOREreactionResponse &_param_41)
{	struct ns1__get_USCOREglycans_USCOREby_USCOREreaction soap_tmp_ns1__get_USCOREglycans_USCOREby_USCOREreaction;
	if (!soap_endpoint)
		soap_endpoint = "http://soap.genome.jp/keggapi/request_v5.0.cgi";
	if (!soap_action)
		soap_action = "SOAP/KEGG#get_glycans_by_reaction";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__get_USCOREglycans_USCOREby_USCOREreaction.reaction_USCOREid = reaction_USCOREid;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__get_USCOREglycans_USCOREby_USCOREreaction(soap, &soap_tmp_ns1__get_USCOREglycans_USCOREby_USCOREreaction);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__get_USCOREglycans_USCOREby_USCOREreaction(soap, &soap_tmp_ns1__get_USCOREglycans_USCOREby_USCOREreaction, "ns1:get_glycans_by_reaction", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__get_USCOREglycans_USCOREby_USCOREreaction(soap, &soap_tmp_ns1__get_USCOREglycans_USCOREby_USCOREreaction, "ns1:get_glycans_by_reaction", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_ns1__get_USCOREglycans_USCOREby_USCOREreactionResponse(soap, &_param_41);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns1__get_USCOREglycans_USCOREby_USCOREreactionResponse(soap, &_param_41, "ns1:get_glycans_by_reactionResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__get_USCOREcompounds_USCOREby_USCOREenzyme(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string enzyme_USCOREid, struct ns1__get_USCOREcompounds_USCOREby_USCOREenzymeResponse &_param_42)
{	struct ns1__get_USCOREcompounds_USCOREby_USCOREenzyme soap_tmp_ns1__get_USCOREcompounds_USCOREby_USCOREenzyme;
	if (!soap_endpoint)
		soap_endpoint = "http://soap.genome.jp/keggapi/request_v5.0.cgi";
	if (!soap_action)
		soap_action = "SOAP/KEGG#get_compounds_by_enzyme";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__get_USCOREcompounds_USCOREby_USCOREenzyme.enzyme_USCOREid = enzyme_USCOREid;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__get_USCOREcompounds_USCOREby_USCOREenzyme(soap, &soap_tmp_ns1__get_USCOREcompounds_USCOREby_USCOREenzyme);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__get_USCOREcompounds_USCOREby_USCOREenzyme(soap, &soap_tmp_ns1__get_USCOREcompounds_USCOREby_USCOREenzyme, "ns1:get_compounds_by_enzyme", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__get_USCOREcompounds_USCOREby_USCOREenzyme(soap, &soap_tmp_ns1__get_USCOREcompounds_USCOREby_USCOREenzyme, "ns1:get_compounds_by_enzyme", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_ns1__get_USCOREcompounds_USCOREby_USCOREenzymeResponse(soap, &_param_42);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns1__get_USCOREcompounds_USCOREby_USCOREenzymeResponse(soap, &_param_42, "ns1:get_compounds_by_enzymeResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__get_USCOREglycans_USCOREby_USCOREenzyme(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string enzyme_USCOREid, struct ns1__get_USCOREglycans_USCOREby_USCOREenzymeResponse &_param_43)
{	struct ns1__get_USCOREglycans_USCOREby_USCOREenzyme soap_tmp_ns1__get_USCOREglycans_USCOREby_USCOREenzyme;
	if (!soap_endpoint)
		soap_endpoint = "http://soap.genome.jp/keggapi/request_v5.0.cgi";
	if (!soap_action)
		soap_action = "SOAP/KEGG#get_glycans_by_enzyme";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__get_USCOREglycans_USCOREby_USCOREenzyme.enzyme_USCOREid = enzyme_USCOREid;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__get_USCOREglycans_USCOREby_USCOREenzyme(soap, &soap_tmp_ns1__get_USCOREglycans_USCOREby_USCOREenzyme);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__get_USCOREglycans_USCOREby_USCOREenzyme(soap, &soap_tmp_ns1__get_USCOREglycans_USCOREby_USCOREenzyme, "ns1:get_glycans_by_enzyme", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__get_USCOREglycans_USCOREby_USCOREenzyme(soap, &soap_tmp_ns1__get_USCOREglycans_USCOREby_USCOREenzyme, "ns1:get_glycans_by_enzyme", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_ns1__get_USCOREglycans_USCOREby_USCOREenzymeResponse(soap, &_param_43);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns1__get_USCOREglycans_USCOREby_USCOREenzymeResponse(soap, &_param_43, "ns1:get_glycans_by_enzymeResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__convert_USCOREmol_USCOREto_USCOREkcf(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string mol_USCOREtext, std::string &return_)
{	struct ns1__convert_USCOREmol_USCOREto_USCOREkcf soap_tmp_ns1__convert_USCOREmol_USCOREto_USCOREkcf;
	struct ns1__convert_USCOREmol_USCOREto_USCOREkcfResponse *soap_tmp_ns1__convert_USCOREmol_USCOREto_USCOREkcfResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://soap.genome.jp/keggapi/request_v5.0.cgi";
	if (!soap_action)
		soap_action = "SOAP/KEGG#convert_mol_to_kcf";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__convert_USCOREmol_USCOREto_USCOREkcf.mol_USCOREtext = mol_USCOREtext;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__convert_USCOREmol_USCOREto_USCOREkcf(soap, &soap_tmp_ns1__convert_USCOREmol_USCOREto_USCOREkcf);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__convert_USCOREmol_USCOREto_USCOREkcf(soap, &soap_tmp_ns1__convert_USCOREmol_USCOREto_USCOREkcf, "ns1:convert_mol_to_kcf", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__convert_USCOREmol_USCOREto_USCOREkcf(soap, &soap_tmp_ns1__convert_USCOREmol_USCOREto_USCOREkcf, "ns1:convert_mol_to_kcf", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_std__string(soap, &return_);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ns1__convert_USCOREmol_USCOREto_USCOREkcfResponse = soap_get_ns1__convert_USCOREmol_USCOREto_USCOREkcfResponse(soap, NULL, "ns1:convert_mol_to_kcfResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return_ = soap_tmp_ns1__convert_USCOREmol_USCOREto_USCOREkcfResponse->return_;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__get_USCOREkos_USCOREby_USCOREpathway(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string pathway_USCOREid, struct ns1__get_USCOREkos_USCOREby_USCOREpathwayResponse &_param_44)
{	struct ns1__get_USCOREkos_USCOREby_USCOREpathway soap_tmp_ns1__get_USCOREkos_USCOREby_USCOREpathway;
	if (!soap_endpoint)
		soap_endpoint = "http://soap.genome.jp/keggapi/request_v5.0.cgi";
	if (!soap_action)
		soap_action = "SOAP/KEGG#get_kos_by_pathway";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__get_USCOREkos_USCOREby_USCOREpathway.pathway_USCOREid = pathway_USCOREid;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__get_USCOREkos_USCOREby_USCOREpathway(soap, &soap_tmp_ns1__get_USCOREkos_USCOREby_USCOREpathway);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__get_USCOREkos_USCOREby_USCOREpathway(soap, &soap_tmp_ns1__get_USCOREkos_USCOREby_USCOREpathway, "ns1:get_kos_by_pathway", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__get_USCOREkos_USCOREby_USCOREpathway(soap, &soap_tmp_ns1__get_USCOREkos_USCOREby_USCOREpathway, "ns1:get_kos_by_pathway", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_ns1__get_USCOREkos_USCOREby_USCOREpathwayResponse(soap, &_param_44);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns1__get_USCOREkos_USCOREby_USCOREpathwayResponse(soap, &_param_44, "ns1:get_kos_by_pathwayResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__get_USCOREpathways_USCOREby_USCOREkos(struct soap *soap, const char *soap_endpoint, const char *soap_action, ArrayOfstring *ko_USCOREid_USCORElist, std::string org, struct ns1__get_USCOREpathways_USCOREby_USCOREkosResponse &_param_45)
{	struct ns1__get_USCOREpathways_USCOREby_USCOREkos soap_tmp_ns1__get_USCOREpathways_USCOREby_USCOREkos;
	if (!soap_endpoint)
		soap_endpoint = "http://soap.genome.jp/keggapi/request_v5.0.cgi";
	if (!soap_action)
		soap_action = "SOAP/KEGG#get_pathways_by_kos";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__get_USCOREpathways_USCOREby_USCOREkos.ko_USCOREid_USCORElist = ko_USCOREid_USCORElist;
	soap_tmp_ns1__get_USCOREpathways_USCOREby_USCOREkos.org = org;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__get_USCOREpathways_USCOREby_USCOREkos(soap, &soap_tmp_ns1__get_USCOREpathways_USCOREby_USCOREkos);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__get_USCOREpathways_USCOREby_USCOREkos(soap, &soap_tmp_ns1__get_USCOREpathways_USCOREby_USCOREkos, "ns1:get_pathways_by_kos", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__get_USCOREpathways_USCOREby_USCOREkos(soap, &soap_tmp_ns1__get_USCOREpathways_USCOREby_USCOREkos, "ns1:get_pathways_by_kos", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_ns1__get_USCOREpathways_USCOREby_USCOREkosResponse(soap, &_param_45);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns1__get_USCOREpathways_USCOREby_USCOREkosResponse(soap, &_param_45, "ns1:get_pathways_by_kosResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

/* End of soapClient.cpp */
